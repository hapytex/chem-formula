-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package chem-formula
@version 0.1.0.0


-- | A module that defines the different types of chemical bonds together
--   with conversions from and to corresponding unicode characters.
module Chemistry.Bond

-- | A datatype that defines the different types of bonds between atoms.
--   There are single, double, triple and quadruple bonds. <a>Bond</a> is
--   an instance of <a>Monoid</a> where we implement it by picking the
--   maximum bond. The neutral element is thus a single bond.
data Bond

-- | A <i>single</i> bond.
BSingle :: Bond

-- | A <i>double</i> bond.
BDouble :: Bond

-- | A <i>triple</i> bond.
BTriple :: Bond

-- | A <i>quadruple</i> bond.
BQuadruple :: Bond

-- | Convert the given <a>Bond</a> type to a unicode character to format
--   that binding.
bondToUnicode :: Bond -> Char

-- | Parse the given <a>Char</a>acter to the corresponding <a>Bond</a>. It
--   makes use of the characters defined in <a>bondToUnicode</a> as well as
--   characters defined by the <i>SMILES</i> standard.
bondFromUnicode :: Char -> Maybe Bond

-- | A list of 2-tuples where the left item defines a <a>Char</a>acter and
--   the right item the corresponding <a>Bond</a>. This is used for parsing
--   purposes.
bondChars :: [(Char, Bond)]
instance GHC.Show.Show Chemistry.Bond.Bond
instance GHC.Read.Read Chemistry.Bond.Bond
instance GHC.Classes.Ord Chemistry.Bond.Bond
instance Language.Haskell.TH.Syntax.Lift Chemistry.Bond.Bond
instance GHC.Classes.Eq Chemistry.Bond.Bond
instance GHC.Enum.Enum Chemistry.Bond.Bond
instance GHC.Enum.Bounded Chemistry.Bond.Bond
instance Data.Data.Data Chemistry.Bond.Bond
instance GHC.Base.Semigroup Chemistry.Bond.Bond
instance GHC.Base.Monoid Chemistry.Bond.Bond
instance Data.Default.Class.Default Chemistry.Bond.Bond


-- | A module that defines the main typeclasses and functions for parsing,
--   presenting and rendering molecules.
module Chemistry.Core

-- | A typeclass that specifies a collection where items can have a
--   multiplication factor.
class QuantifiedElements f

-- | Fold a given <a>QuantifiedElements</a> object by defining rules for
--   mapping, appending, and multiplying.
foldQuantified :: QuantifiedElements f => (a -> b) -> (b -> b -> b) -> (Int -> b -> b) -> f a -> b

-- | List the elements in the <a>QuantifiedElements</a> expression and
--   append a given list. Items can occur <i>multiple</i> times.
listElements' :: QuantifiedElements f => f a -> [(a, Int)] -> [(a, Int)]

-- | List the elements in the <a>QuantifiedElements</a>. Items can occur
--   <i>multiple</i> times.
listElements :: QuantifiedElements f => f a -> [(a, Int)]

-- | Convert the given <a>QuantifiedElements</a> to a <a>HashMap</a> that
--   maps each item to the number of times it is present.
listElementsCounter :: (QuantifiedElements f, Eq a, Hashable a) => f a -> HashMap a Int

-- | A typeclass to represent types that can be rendered as chemical
--   formulas.
class FormulaElement a

-- | Render the given item as <a>Text</a>.
toFormula :: FormulaElement a => a -> Text

-- | Render the given chemical item with the <i>precedence</i> value.
toFormulaPrec :: FormulaElement a => Int -> a -> Text -> Text

-- | Render the given chemical item as <a>Markup</a>.
toFormulaMarkup :: FormulaElement a => a -> Markup

-- | Render the given chemical item with the <i>precedence</i> value.
toFormulaMarkupPrec :: FormulaElement a => Int -> a -> Markup -> Markup

-- | A typeclass that represents that the given type has a <i>weight</i>.
class Weight a

-- | Calculate the weight of the given item.
weight :: (Weight a, Floating b) => a -> Maybe (Quantity DMass b)

-- | Determine the weight of the given <a>QuantifiedElements</a> object.
--   This is implemented by summing and multiplying the weights of the
--   individual elements.
quantifiedWeight :: (QuantifiedElements f, Weight a, Floating b) => f a -> Maybe (Quantity DMass b)

-- | A typeclass that spans an order relation based on the rules of a
--   <i>Hill system</i>.
class HillCompare a

-- | Compare the two given items according to the hill system.
hillCompare :: HillCompare a => a -> a -> Ordering

-- | A helper function to wrap the text generator in parenthesis if the
--   given condition is <a>True</a>, and simply returns the text generator
--   otherwise.
showParenText :: Bool -> (Text -> Text) -> Text -> Text

-- | A helper function to wrap the markup generator in parenthesis if the
--   given condition is <a>True</a>, and simply returns the markup
--   generator otherwise.
showParenMarkup :: Bool -> (Markup -> Markup) -> Markup -> Markup


-- | A module that defines datatypes to specify the charge of an atoms.
module Chemistry.Charge

-- | A data type that specifies that the given item has a <i>charge</i>.
data Charged a

-- | A dataconstructor that defines a Charged item together with the
--   charge.
Charged :: a -> Int -> Charged a

-- | Construct a <a>Charged</a> item with charge 0.
neutral :: a -> Charged a
instance Data.Traversable.Traversable Chemistry.Charge.Charged
instance GHC.Show.Show a => GHC.Show.Show (Chemistry.Charge.Charged a)
instance GHC.Read.Read a => GHC.Read.Read (Chemistry.Charge.Charged a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Chemistry.Charge.Charged a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Chemistry.Charge.Charged a)
instance GHC.Base.Functor Chemistry.Charge.Charged
instance Data.Foldable.Foldable Chemistry.Charge.Charged
instance GHC.Classes.Eq a => GHC.Classes.Eq (Chemistry.Charge.Charged a)
instance Data.Data.Data a => Data.Data.Data (Chemistry.Charge.Charged a)
instance Chemistry.Core.FormulaElement a => Chemistry.Core.FormulaElement (Chemistry.Charge.Charged a)
instance Chemistry.Core.Weight a => Chemistry.Core.Weight (Chemistry.Charge.Charged a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Chemistry.Charge.Charged a)
instance Test.QuickCheck.Arbitrary.Arbitrary1 Chemistry.Charge.Charged


-- | A module that defines the different types of chemical elements and
--   their weight.
module Chemistry.Element

-- | A data type that defines the different chemical elements.
data Element

-- | The <i>hydrogen</i> element.
H :: Element

-- | The <i>helium</i> element.
He :: Element

-- | The <i>lithium</i> element.
Li :: Element

-- | The <i>beryllium</i> element.
Be :: Element

-- | The <i>boron</i> element.
B :: Element

-- | The <i>carbon</i> element.
C :: Element

-- | The <i>nitrogen</i> element.
N :: Element

-- | The <i>oxygen</i> element.
O :: Element

-- | The <i>fluorine</i> element.
F :: Element

-- | The <i>neon</i> element.
Ne :: Element

-- | The <i>sodium</i> element.
Na :: Element

-- | The <i>magnesium</i> element.
Mg :: Element

-- | The <i>aluminium</i> element.
Al :: Element

-- | The <i>silicon</i> element.
Si :: Element

-- | The <i>phosphorus</i> element.
P :: Element

-- | The <i>sulfur</i> element.
S :: Element

-- | The <i>chlorine</i> element.
Cl :: Element

-- | The <i>argon</i> element.
Ar :: Element

-- | The <i>potassium</i> element.
K :: Element

-- | The <i>calcium</i> element.
Ca :: Element

-- | The <i>scandium</i> element.
Sc :: Element

-- | The <i>titanium</i> element.
Ti :: Element

-- | The <i>vanadium</i> element.
V :: Element

-- | The <i>chromium</i> element.
Cr :: Element

-- | The <i>manganese</i> element.
Mn :: Element

-- | The <i>iron</i> element.
Fe :: Element

-- | The <i>cobalt</i> element.
Co :: Element

-- | The <i>nickel</i> element.
Ni :: Element

-- | The <i>copper</i> element.
Cu :: Element

-- | The <i>zinc</i> element.
Zn :: Element

-- | The <i>gallium</i> element.
Ga :: Element

-- | The <i>germanium</i> element.
Ge :: Element

-- | The <i>arsenic</i> element.
As :: Element

-- | The <i>selenium</i> element.
Se :: Element

-- | The <i>bromine</i> element.
Br :: Element

-- | The <i>krypton</i> element.
Kr :: Element

-- | The <i>rubidium</i> element.
Rb :: Element

-- | The <i>strontium</i> element.
Sr :: Element

-- | The <i>yttrium</i> element.
Y :: Element

-- | The <i>zirconium</i> element.
Zr :: Element

-- | The <i>niobium</i> element.
Nb :: Element

-- | The <i>molybdenum</i> element.
Mo :: Element

-- | The <i>technetium</i> element.
Tc :: Element

-- | The <i>ruthenium</i> element.
Ru :: Element

-- | The <i>rhodium</i> element.
Rh :: Element

-- | The <i>palladium</i> element.
Pd :: Element

-- | The <i>silver</i> element.
Ag :: Element

-- | The <i>cadmium</i> element.
Cd :: Element

-- | The <i>indium</i> element.
In :: Element

-- | The <i>tin</i> element.
Sn :: Element

-- | The <i>antimony</i> element.
Sb :: Element

-- | The <i>tellurium</i> element.
Te :: Element

-- | The <i>iodine</i> element.
I :: Element

-- | The <i>xenon</i> element.
Xe :: Element

-- | The <i>caesium</i> element.
Cs :: Element

-- | The <i>barium</i> element.
Ba :: Element

-- | The <i>lanthanum</i> element.
La :: Element

-- | The <i>cerium</i> element.
Ce :: Element

-- | The <i>praseodymium</i> element.
Pr :: Element

-- | The <i>neodymium</i> element.
Nd :: Element

-- | The <i>promethium</i> element.
Pm :: Element

-- | The <i>samarium</i> element.
Sm :: Element

-- | The <i>europium</i> element.
Eu :: Element

-- | The <i>gadolinium</i> element.
Gd :: Element

-- | The <i>terbium</i> element.
Tb :: Element

-- | The <i>dysprosium</i> element.
Dy :: Element

-- | The <i>holmium</i> element.
Ho :: Element

-- | The <i>erbium</i> element.
Er :: Element

-- | The <i>thulium</i> element.
Tm :: Element

-- | The <i>ytterbium</i> element.
Yb :: Element

-- | The <i>lutetium</i> element.
Lu :: Element

-- | The <i>hafnium</i> element.
Hf :: Element

-- | The <i>tantalum</i> element.
Ta :: Element

-- | The <i>tungsten</i> element.
W :: Element

-- | The <i>rhenium</i> element.
Re :: Element

-- | The <i>osmium</i> element.
Os :: Element

-- | The <i>iridium</i> element.
Ir :: Element

-- | The <i>platinum</i> element.
Pt :: Element

-- | The <i>gold</i> element.
Au :: Element

-- | The <i>mercury</i> element.
Hg :: Element

-- | The <i>thallium</i> element.
Tl :: Element

-- | The <i>lead</i> element.
Pb :: Element

-- | The <i>bismuth</i> element.
Bi :: Element

-- | The <i>polonium</i> element.
Po :: Element

-- | The <i>astatine</i> element.
At :: Element

-- | The <i>radon</i> element.
Rn :: Element

-- | The <i>francium</i> element.
Fr :: Element

-- | The <i>radium</i> element.
Ra :: Element

-- | The <i>actinium</i> element.
Ac :: Element

-- | The <i>thorium</i> element.
Th :: Element

-- | The <i>protactinium</i> element.
Pa :: Element

-- | The <i>uranium</i> element.
U :: Element

-- | The <i>neptunium</i> element.
Np :: Element

-- | The <i>plutonium</i> element.
Pu :: Element

-- | The <i>americium</i> element.
Am :: Element

-- | The <i>curium</i> element.
Cm :: Element

-- | The <i>berkelium</i> element.
Bk :: Element

-- | The <i>californium</i> element.
Cf :: Element

-- | The <i>einsteinium</i> element.
Es :: Element

-- | The <i>fermium</i> element.
Fm :: Element

-- | The <i>mendelevium</i> element.
Md :: Element

-- | The <i>nobelium</i> element.
No :: Element

-- | The <i>lawrencium</i> element.
Lr :: Element

-- | The <i>rutherfordium</i> element.
Rf :: Element

-- | The <i>dubnium</i> element.
Db :: Element

-- | The <i>seaborgium</i> element.
Sg :: Element

-- | The <i>bohrium</i> element.
Bh :: Element

-- | The <i>hassium</i> element.
Hs :: Element

-- | The <i>meitnerium</i> element.
Mt :: Element

-- | The <i>darmstadtium</i> element.
Ds :: Element

-- | The <i>roentgenium</i> element.
Rg :: Element

-- | The <i>copernicium</i> element.
Cn :: Element

-- | The <i>nihonium</i> element.
Nh :: Element

-- | The <i>flerovium</i> element.
Fl :: Element

-- | The <i>moscovium</i> element.
Mc :: Element

-- | The <i>livermorium</i> element.
Lv :: Element

-- | The <i>tennessine</i> element.
Ts :: Element

-- | The <i>oganesson</i> element.
Og :: Element

-- | A pattern synonym for <i>unnilunium</i>, which is the systematic
--   element name of <i>mendelevium</i>.
pattern Unu :: Element

-- | A pattern synonym for <i>unnilbium</i>, which is the systematic
--   element name of <i>nobelium</i>.
pattern Unb :: Element

-- | A pattern synonym for <i>unniltrium</i>, which is the systematic
--   element name of <i>lawrencium</i>.
pattern Unt :: Element

-- | A pattern synonym for <i>unnilquadium</i>, which is the systematic
--   element name of <i>rutherfordium</i>.
pattern Unq :: Element

-- | A pattern synonym for <i>unnilpentium</i>, which is the systematic
--   element name of <i>dubnium</i>.
pattern Unp :: Element

-- | A pattern synonym for <i>unnilhexium</i>, which is the systematic
--   element name of <i>seaborgium</i>.
pattern Unh :: Element

-- | A pattern synonym for <i>unnilseptium</i>, which is the systematic
--   element name of <i>bohrium</i>.
pattern Uns :: Element

-- | A pattern synonym for <i>unniloctium</i>, which is the systematic
--   element name of <i>hassium</i>.
pattern Uno :: Element

-- | A pattern synonym for <i>unnilennium</i>, which is the systematic
--   element name of <i>meitnerium</i>.
pattern Une :: Element

-- | A pattern synonym for <i>ununnilium</i>, which is the systematic
--   element name of <i>darmstadtium</i>.
pattern Uun :: Element

-- | A pattern synonym for <i>unununium</i>, which is the systematic
--   element name of <i>roentgenium</i>.
pattern Uuu :: Element

-- | A pattern synonym for <i>ununbium</i>, which is the systematic element
--   name of <i>copernicium</i>.
pattern Uub :: Element

-- | A pattern synonym for <i>ununtrium</i>, which is the systematic
--   element name of <i>nihonium</i>.
pattern Uut :: Element

-- | A pattern synonym for <i>ununquadium</i>, which is the systematic
--   element name of <i>flerovium</i>.
pattern Uuq :: Element

-- | A pattern synonym for <i>ununpentium</i>, which is the systematic
--   element name of <i>moscovium</i>.
pattern Uup :: Element

-- | A pattern synonym for <i>ununhexium</i>, which is the systematic
--   element name of <i>livermorium</i>.
pattern Uuh :: Element

-- | A pattern synonym for <i>ununseptium</i>, which is the systematic
--   element name of <i>tennessine</i>.
pattern Uus :: Element

-- | A pattern synonym for <i>ununoctium</i>, which is the systematic
--   element name of <i>oganesson</i>.
pattern Uuo :: Element

-- | Obtain the atomic number of the given <a>Element</a>.
atomNumber :: Element -> Int

-- | Obtain the atomic weight of the given <a>Element</a> given this is
--   specified.
atomicWeight :: Floating a => Element -> Maybe (Quantity DMass a)

-- | Obtain the name of the given <a>Element</a>.
elementName :: Element -> String
instance GHC.Show.Show Chemistry.Element.Element
instance GHC.Read.Read Chemistry.Element.Element
instance GHC.Classes.Ord Chemistry.Element.Element
instance Language.Haskell.TH.Syntax.Lift Chemistry.Element.Element
instance GHC.Classes.Eq Chemistry.Element.Element
instance GHC.Enum.Enum Chemistry.Element.Element
instance Data.Data.Data Chemistry.Element.Element
instance GHC.Enum.Bounded Chemistry.Element.Element
instance Text.Blaze.ToMarkup Chemistry.Element.Element
instance Chemistry.Core.HillCompare Chemistry.Element.Element
instance Data.Hashable.Class.Hashable Chemistry.Element.Element
instance GHC.Arr.Ix Chemistry.Element.Element
instance Test.QuickCheck.Arbitrary.Arbitrary Chemistry.Element.Element
instance Chemistry.Core.FormulaElement Chemistry.Element.Element
instance Chemistry.Core.Weight Chemistry.Element.Element
instance Data.String.IsString Chemistry.Element.Element


-- | A module that defines datastructure to present formulas and linear
--   chains.
module Chemistry.Formula

-- | A data type to specify the part of a formula. This allow to
--   <i>multiply</i> a <a>Formula</a>, but <i>not</i> concatenate.
data FormulaPart a

-- | Wrap an item to present it as a <a>FormulaPart</a>.
FormulaItem :: a -> FormulaPart a

-- | Multiply a <a>Formula</a> with a given number.
(:*) :: Formula a -> Int -> FormulaPart a
infix 8 :*

-- | A data type to specify a formula. This allows to concatenate
--   <a>FormulaPart</a>s together, but not multiply these.
data Formula a

-- | Wrap a <a>FormulaPart</a> to present it as a <a>Formula</a>.
FormulaPart :: FormulaPart a -> Formula a

-- | Prepend a <a>Formula</a> with a <a>FormulaPart</a>.
(:-) :: FormulaPart a -> Formula a -> Formula a
infixr 7 :-

-- | Multiply the given <a>FormulaPart</a> with a given number to a new
--   <a>FormulaPart</a>.
(.*) :: FormulaPart a -> Int -> FormulaPart a
infixr 8 .*

-- | Convert a given formula to a <a>NonEmpty</a> list of
--   <a>FormulaPart</a>s.
formulaToParts :: Formula a -> NonEmpty (FormulaPart a)

-- | Convert a given list of items with their quantity to a <a>Formula</a>.
--   This does <i>not</i> allow to multiply a "formulapart" like
--   <tt>C2H4(OH)2</tt>.
fromElementList :: [(a, Int)] -> Formula a

-- | Convert the given <a>Formula</a> to the a <a>Formula</a> that is a
--   <i>molecular</i> formula. In this formula, each atom is denoted once
--   with the total number of times it occurs.
toMolecular :: (Eq a, Hashable a) => Formula a -> Formula a

-- | Convert the given <a>Formula</a> to a <a>Formula</a> that presents the
--   molecule with the <i>Hill system</i>. In this system <i>carbon</i> is
--   denoted first followed by <i>hydrogen</i>, etc.
toHillFormula :: (Eq a, Hashable a, HillCompare a) => Formula a -> Formula a

-- | A data type to present a chain of elements that are separated by
--   (possibly different) bond.
data LinearChain bond element

-- | Wrap a single element into a <a>LinearChain</a>.
ChainItem :: element -> LinearChain bond element

-- | Prepend an existing element with an element through a binding.
Chain :: element -> bond -> LinearChain bond element -> LinearChain bond element

-- | Create a <a>LinearChain</a> by prepending an element with a
--   <i>single</i> bond to a <a>LinearChain</a>.
(.-) :: element -> LinearChain Bond element -> LinearChain Bond element
infixr 6 .-

-- | Create a <a>LinearChain</a> by prepending an element with a
--   <i>double</i> bond to a <a>LinearChain</a>.
(.=) :: element -> LinearChain Bond element -> LinearChain Bond element
infixr 6 .=

-- | Create a <a>LinearChain</a> by prepending an element with a
--   <i>triple</i> bond to a <a>LinearChain</a>.
(.#) :: element -> LinearChain Bond element -> LinearChain Bond element
infixr 6 .#

-- | Create a <a>LinearChain</a> by prepending an element with a
--   <i>quadruple</i> bond to a <a>LinearChain</a>.
(.$) :: element -> LinearChain Bond element -> LinearChain Bond element
infixr 6 .$
instance Data.Traversable.Traversable (Chemistry.Formula.LinearChain bond)
instance (GHC.Show.Show element, GHC.Show.Show bond) => GHC.Show.Show (Chemistry.Formula.LinearChain bond element)
instance (GHC.Read.Read element, GHC.Read.Read bond) => GHC.Read.Read (Chemistry.Formula.LinearChain bond element)
instance (GHC.Classes.Ord element, GHC.Classes.Ord bond) => GHC.Classes.Ord (Chemistry.Formula.LinearChain bond element)
instance (Language.Haskell.TH.Syntax.Lift element, Language.Haskell.TH.Syntax.Lift bond) => Language.Haskell.TH.Syntax.Lift (Chemistry.Formula.LinearChain bond element)
instance GHC.Base.Functor (Chemistry.Formula.LinearChain bond)
instance Data.Foldable.Foldable (Chemistry.Formula.LinearChain bond)
instance (GHC.Classes.Eq element, GHC.Classes.Eq bond) => GHC.Classes.Eq (Chemistry.Formula.LinearChain bond element)
instance (Data.Data.Data bond, Data.Data.Data element) => Data.Data.Data (Chemistry.Formula.LinearChain bond element)
instance Data.Traversable.Traversable Chemistry.Formula.FormulaPart
instance GHC.Show.Show a => GHC.Show.Show (Chemistry.Formula.FormulaPart a)
instance GHC.Read.Read a => GHC.Read.Read (Chemistry.Formula.FormulaPart a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Chemistry.Formula.FormulaPart a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Chemistry.Formula.FormulaPart a)
instance GHC.Base.Functor Chemistry.Formula.FormulaPart
instance Data.Foldable.Foldable Chemistry.Formula.FormulaPart
instance GHC.Classes.Eq a => GHC.Classes.Eq (Chemistry.Formula.FormulaPart a)
instance Data.Data.Data a => Data.Data.Data (Chemistry.Formula.FormulaPart a)
instance Data.Traversable.Traversable Chemistry.Formula.Formula
instance GHC.Show.Show a => GHC.Show.Show (Chemistry.Formula.Formula a)
instance GHC.Read.Read a => GHC.Read.Read (Chemistry.Formula.Formula a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Chemistry.Formula.Formula a)
instance Language.Haskell.TH.Syntax.Lift a => Language.Haskell.TH.Syntax.Lift (Chemistry.Formula.Formula a)
instance GHC.Base.Functor Chemistry.Formula.Formula
instance Data.Foldable.Foldable Chemistry.Formula.Formula
instance GHC.Classes.Eq a => GHC.Classes.Eq (Chemistry.Formula.Formula a)
instance Data.Data.Data a => Data.Data.Data (Chemistry.Formula.Formula a)
instance Data.Default.Class.Default bond => GHC.Exts.IsList (Chemistry.Formula.LinearChain bond element)
instance Chemistry.Core.FormulaElement a => Chemistry.Core.FormulaElement (Chemistry.Formula.LinearChain Chemistry.Bond.Bond a)
instance Test.QuickCheck.Arbitrary.Arbitrary2 Chemistry.Formula.LinearChain
instance Test.QuickCheck.Arbitrary.Arbitrary bond => Test.QuickCheck.Arbitrary.Arbitrary1 (Chemistry.Formula.LinearChain bond)
instance (Test.QuickCheck.Arbitrary.Arbitrary element, Test.QuickCheck.Arbitrary.Arbitrary bond) => Test.QuickCheck.Arbitrary.Arbitrary (Chemistry.Formula.LinearChain bond element)
instance GHC.Exts.IsList (Chemistry.Formula.Formula a)
instance GHC.Base.Semigroup (Chemistry.Formula.Formula a)
instance Chemistry.Core.FormulaElement a => Chemistry.Core.FormulaElement (Chemistry.Formula.FormulaPart a)
instance Chemistry.Core.QuantifiedElements Chemistry.Formula.FormulaPart
instance Chemistry.Core.Weight a => Chemistry.Core.Weight (Chemistry.Formula.FormulaPart a)
instance Chemistry.Core.QuantifiedElements Chemistry.Formula.Formula
instance Chemistry.Core.FormulaElement a => Chemistry.Core.FormulaElement (Chemistry.Formula.Formula a)
instance Chemistry.Core.Weight a => Chemistry.Core.Weight (Chemistry.Formula.Formula a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Chemistry.Formula.FormulaPart a)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Chemistry.Formula.Formula a)
instance Test.QuickCheck.Arbitrary.Arbitrary1 Chemistry.Formula.FormulaPart
instance Test.QuickCheck.Arbitrary.Arbitrary1 Chemistry.Formula.Formula


-- | A module that defines datatypes to specify the isotope of an atoms.
module Chemistry.Isotope

-- | A datatype that specifies that an item has a specific isotope.
data Isotope a

-- | A dataconstructor that contains the item together with its mass
--   number.
Isotope :: a -> Int -> Isotope a

-- | The chemical item for which we work with an isotope.
[isoElement] :: Isotope a -> a

-- | The mass number of that chemical element.
[massNumber] :: Isotope a -> Int

-- | Obtain the weight of the given isotope. For isotopes that are
--   impossible or unknown, <a>Nothing</a> is returned.
isotopeWeight :: Floating a => Element -> Int -> Maybe (Quantity DMass a)
instance Data.Traversable.Traversable Chemistry.Isotope.Isotope
instance GHC.Show.Show a => GHC.Show.Show (Chemistry.Isotope.Isotope a)
instance GHC.Read.Read a => GHC.Read.Read (Chemistry.Isotope.Isotope a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Chemistry.Isotope.Isotope a)
instance GHC.Base.Functor Chemistry.Isotope.Isotope
instance Data.Foldable.Foldable Chemistry.Isotope.Isotope
instance GHC.Classes.Eq a => GHC.Classes.Eq (Chemistry.Isotope.Isotope a)
instance Chemistry.Core.HillCompare a => Chemistry.Core.HillCompare (Chemistry.Isotope.Isotope a)
instance Chemistry.Core.FormulaElement a => Chemistry.Core.FormulaElement (Chemistry.Isotope.Isotope a)
instance Chemistry.Core.Weight (Chemistry.Isotope.Isotope Chemistry.Element.Element)
instance Test.QuickCheck.Arbitrary.Arbitrary a => Test.QuickCheck.Arbitrary.Arbitrary (Chemistry.Isotope.Isotope a)
instance Test.QuickCheck.Arbitrary.Arbitrary1 Chemistry.Isotope.Isotope


-- | A module that defines parsers to parse elements, formulas, bonds, etc.
module Chemistry.Parser

-- | A parser that aims to convert text into an <a>Element</a>.
elementParser :: Stream s m Char => ParsecT s u m Element

-- | A parser that parses the different types of bonds as defined by the
--   <a>bondChars</a>.
bondParser :: Stream s m Char => ParsecT s u m Bond

-- | A parser that parses charged items. The charge can be represented with
--   a plus or minus followed by a number, or a sequence of plusses and
--   minusses where the number of characters determine the magnitude of the
--   charge.
chargedParser :: Stream s m Char => ParsecT s u m (Charged Element)

-- | A parser that uses a parser, and reads that parser together with the
--   charge. The charge can be represented with a plus or minus followed by
--   a number, or a sequence of plusses and minusses where the number of
--   characters determine the magnitude of the charge.
chargedParser' :: Stream s m Char => ParsecT s u m a -> ParsecT s u m (Charged a)

-- | A function that is given a parser to parse an item and produces a
--   parser that parses the element with its quantity. If no quantity is
--   given, one is used.
quantityParser :: Stream s m Char => ParsecT s u m a -> ParsecT s u m (a, Int)

-- | A parser that parses an <a>Element</a> together with an optional
--   quantity. if no quantity is passed, one is used.
elementQuantityParser :: Stream s m Char => ParsecT s u m (Element, Int)

-- | A parser that parses <a>Formula</a>s with <a>Element</a>s as items.
formulaParser :: Stream s m Char => ParsecT s u m (Formula Element)

-- | A parser that will for a given element parser parse a formula which is
--   a combination of concatenations and multiplications.
formulaParser' :: Stream s m Char => ParsecT s u m a -> ParsecT s u m (Formula a)

-- | A parser that parses <a>Formula</a>s with <a>Element</a>s that can
--   contain a charge.
chargedFormulaParser :: Stream s m Char => ParsecT s u m (Formula (Charged Element))

-- | A parser that parses a <a>LinearChain</a> of <a>Bond</a>s and
--   <a>Formula</a>s of <a>Element</a>s. This makes use of the
--   <a>linearChainParser''</a>, and uses other parsers to parse the bond
--   and formula.
linearChainParser :: Stream s m Char => ParsecT s u m (LinearChain Bond (Formula Element))

-- | A function that produces a parser that parses a <a>LinearChain</a>
--   that parses <a>Bond</a>s and makes use of a given parser to parse the
--   items in the linear chain.
linearChainParser' :: Stream s m Char => ParsecT s u m a -> ParsecT s u m (LinearChain Bond a)

-- | A function that produces a parser that parses a <a>LinearChain</a>
--   that makes use of given parsers to parse the bonds and the items in
--   the linear chain.
linearChainParser'' :: Stream s m t => ParsecT s u m bond -> ParsecT s u m element -> ParsecT s u m (LinearChain bond element)

-- | A parser that parses a <a>LinearChain</a> of <a>Bond</a>s and
--   <a>Formula</a>s of <i>charged</i> <a>Element</a>s. This makes use of
--   the <a>linearChainParser''</a>, and uses other parsers to parse the
--   bond and formula of charged elements.
chargedLinearChainParser :: Stream s m Char => ParsecT s u m (LinearChain Bond (Formula (Charged Element)))

-- | A quasiquoter that can parse chemical <a>Element</a>s. The quasiquoter
--   can be used for expressions and patterns. If it is used as a type
--   signature, it will be replaced with the <a>Element</a> type.
elqq :: QuasiQuoter

-- | A quasiquoter that can parse chemical <a>Element</a>s with an optional
--   quantity. The quasiquoter can be used for expressions and patterns. If
--   it is used as a type signature, it will be replaced with a 2-tuple
--   type with an <a>Element</a> and an <a>Int</a>.
elqqq :: QuasiQuoter

-- | A quasiquoter that can parse <a>Charged</a> chemical <a>Element</a>s
--   with an optional quantity. The quasiquoter can be used for expressions
--   and patterns. If it is used as a type signature, it will be replaced
--   with a <a>Charged</a> <a>Element</a>.
chelqq :: QuasiQuoter

-- | A quasiquoter that can parse <a>Formula</a>s of <a>Element</a>s. The
--   quasiquoter can be used for expressions and patterns. If it is used as
--   a type signature, it will be replaced with a <a>Formula</a>
--   <a>Element</a>.
formulaqq :: QuasiQuoter

-- | A quasiquoter that can parse a <a>LinearChain</a> of <a>Bond</a>s and
--   <a>Element</a>s. The quasiquoter can be used for expressions and
--   patterns. If it is used as a type signature, it will be replaced with
--   a <a>LinearChain</a> of <a>Bond</a>s and <a>Element</a>s.
chainqq :: QuasiQuoter

-- | A quasiquoter that can parse a <a>LinearChain</a> of <a>Bond</a>s and
--   <a>Charged</a> <a>Element</a>s. The quasiquoter can be used for
--   expressions and patterns. If it is used as a type signature, it will
--   be replaced with a <a>LinearChain</a> of <a>Bond</a>s and
--   <a>Charged</a> <a>Element</a>s.
chchainqq :: QuasiQuoter
